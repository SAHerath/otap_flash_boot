
bootSAH_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0003e81a  000008ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081a  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800204  00800204  000008b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c8  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4f  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b6  00000000  00000000  00002a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00003224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000698  00000000  00000000  0000328c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a55  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00004379  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	0d 94 72 f0 	jmp	0x3e0e4	; 0x3e0e4 <__ctors_end>
   3e004:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e008:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e00c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e010:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e014:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e018:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e01c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e020:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e024:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e028:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e02c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e030:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e034:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e038:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e03c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e040:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e044:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e048:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e04c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e050:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e054:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e058:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e05c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e060:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e064:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e068:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e06c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e070:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e074:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e078:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e07c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e080:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e084:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e088:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e08c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e090:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e094:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e098:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e09c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0a0:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0a4:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0a8:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0ac:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0b0:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0b4:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0b8:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0bc:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0c0:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0c4:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0c8:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0cc:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0d0:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0d4:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0d8:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0dc:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0e0:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>

0003e0e4 <__ctors_end>:
   3e0e4:	11 24       	eor	r1, r1
   3e0e6:	1f be       	out	0x3f, r1	; 63
   3e0e8:	cf ef       	ldi	r28, 0xFF	; 255
   3e0ea:	d1 e2       	ldi	r29, 0x21	; 33
   3e0ec:	de bf       	out	0x3e, r29	; 62
   3e0ee:	cd bf       	out	0x3d, r28	; 61
   3e0f0:	01 e0       	ldi	r16, 0x01	; 1
   3e0f2:	0c bf       	out	0x3c, r16	; 60

0003e0f4 <__do_copy_data>:
   3e0f4:	12 e0       	ldi	r17, 0x02	; 2
   3e0f6:	a0 e0       	ldi	r26, 0x00	; 0
   3e0f8:	b2 e0       	ldi	r27, 0x02	; 2
   3e0fa:	ea e1       	ldi	r30, 0x1A	; 26
   3e0fc:	f8 ee       	ldi	r31, 0xE8	; 232
   3e0fe:	03 e0       	ldi	r16, 0x03	; 3
   3e100:	0b bf       	out	0x3b, r16	; 59
   3e102:	02 c0       	rjmp	.+4      	; 0x3e108 <__do_copy_data+0x14>
   3e104:	07 90       	elpm	r0, Z+
   3e106:	0d 92       	st	X+, r0
   3e108:	a4 30       	cpi	r26, 0x04	; 4
   3e10a:	b1 07       	cpc	r27, r17
   3e10c:	d9 f7       	brne	.-10     	; 0x3e104 <__do_copy_data+0x10>

0003e10e <__do_clear_bss>:
   3e10e:	22 e0       	ldi	r18, 0x02	; 2
   3e110:	a4 e0       	ldi	r26, 0x04	; 4
   3e112:	b2 e0       	ldi	r27, 0x02	; 2
   3e114:	01 c0       	rjmp	.+2      	; 0x3e118 <.do_clear_bss_start>

0003e116 <.do_clear_bss_loop>:
   3e116:	1d 92       	st	X+, r1

0003e118 <.do_clear_bss_start>:
   3e118:	a6 30       	cpi	r26, 0x06	; 6
   3e11a:	b2 07       	cpc	r27, r18
   3e11c:	e1 f7       	brne	.-8      	; 0x3e116 <.do_clear_bss_loop>
   3e11e:	0f 94 b8 f0 	call	0x3e170	; 0x3e170 <main>
   3e122:	0d 94 0b f4 	jmp	0x3e816	; 0x3e816 <_exit>

0003e126 <__jumpMain>:

	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

//*	set stack pointer to top of RAM

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e126:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e128:	0e bf       	out	0x3e, r16	; 62

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e12a:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e12c:	0d bf       	out	0x3d, r16	; 61

	asm volatile ( "clr __zero_reg__" );									// GCC depends on register r1 set to 0
   3e12e:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );	// set SREG to 0
   3e130:	1f be       	out	0x3f, r1	; 63
	asm volatile ( "jmp main");												// jump to main()
   3e132:	0d 94 b8 f0 	jmp	0x3e170	; 0x3e170 <main>

0003e136 <__bad_interrupt>:
   3e136:	0d 94 00 f0 	jmp	0x3e000	; 0x3e000 <__vectors>

0003e13a <sendchar>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e13a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e13e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e142:	86 ff       	sbrs	r24, 6
   3e144:	fc cf       	rjmp	.-8      	; 0x3e13e <sendchar+0x4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e146:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e14a:	80 64       	ori	r24, 0x40	; 64
   3e14c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e150:	08 95       	ret

0003e152 <delay_ms>:

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3e152:	20 e0       	ldi	r18, 0x00	; 0
   3e154:	30 e0       	ldi	r19, 0x00	; 0
   3e156:	28 17       	cp	r18, r24
   3e158:	39 07       	cpc	r19, r25
   3e15a:	49 f0       	breq	.+18     	; 0x3e16e <delay_ms+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3e15c:	ef ec       	ldi	r30, 0xCF	; 207
   3e15e:	f7 e0       	ldi	r31, 0x07	; 7
   3e160:	31 97       	sbiw	r30, 0x01	; 1
   3e162:	f1 f7       	brne	.-4      	; 0x3e160 <delay_ms+0xe>
   3e164:	00 c0       	rjmp	.+0      	; 0x3e166 <delay_ms+0x14>
   3e166:	00 00       	nop
   3e168:	2f 5f       	subi	r18, 0xFF	; 255
   3e16a:	3f 4f       	sbci	r19, 0xFF	; 255
   3e16c:	f4 cf       	rjmp	.-24     	; 0x3e156 <delay_ms+0x4>
	{
		_delay_ms(0.5);
	}
}
   3e16e:	08 95       	ret

0003e170 <main>:
void (*app_start)(void) = 0x0000;


//*****************************************************************************
int main(void)
{
   3e170:	cf 93       	push	r28
   3e172:	df 93       	push	r29
   3e174:	cd b7       	in	r28, 0x3d	; 61
   3e176:	de b7       	in	r29, 0x3e	; 62
   3e178:	c0 52       	subi	r28, 0x20	; 32
   3e17a:	d1 40       	sbci	r29, 0x01	; 1
   3e17c:	0f b6       	in	r0, 0x3f	; 63
   3e17e:	f8 94       	cli
   3e180:	de bf       	out	0x3e, r29	; 62
   3e182:	0f be       	out	0x3f, r0	; 63
   3e184:	cd bf       	out	0x3d, r28	; 61
#endif
*/

	//*	some chips dont set the stack properly
	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e186:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e188:	0e bf       	out	0x3e, r16	; 62
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e18a:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e18c:	0d bf       	out	0x3d, r16	; 61

	//************************************************************************
	//*	Dec 29,	2011	<MLS> Issue #181, added watch dog timmer support
	//*	handle the watch dog timer
	uint8_t	mcuStatusReg;
	mcuStatusReg	=	MCUSR;
   3e18e:	94 b7       	in	r25, 0x34	; 52

	__asm__ __volatile__ ("cli");
   3e190:	f8 94       	cli
	__asm__ __volatile__ ("wdr");
   3e192:	a8 95       	wdr
	
	/*MCUSR	=	0;*/
	MCUSR &= ~(1<<WDRF);		// clear WDRF in MCUSR
   3e194:	84 b7       	in	r24, 0x34	; 52
   3e196:	87 7f       	andi	r24, 0xF7	; 247
   3e198:	84 bf       	out	0x34, r24	; 52
	
	WDTCSR	|=	_BV(WDCE) | _BV(WDE);
   3e19a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   3e19e:	88 61       	ori	r24, 0x18	; 24
   3e1a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	WDTCSR	=	0;
   3e1a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	__asm__ __volatile__ ("sei");
   3e1a8:	78 94       	sei
	// check if WDT generated the reset, if so, go straight to app
	if (mcuStatusReg & _BV(WDRF))
   3e1aa:	93 ff       	sbrs	r25, 3
   3e1ac:	05 c0       	rjmp	.+10     	; 0x3e1b8 <main+0x48>
	{
		app_start();
   3e1ae:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__data_end>
   3e1b2:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__data_end+0x1>
   3e1b6:	19 95       	eicall
	 * Branch to bootloader or application code ?
	 */

#ifndef REMOVE_BOOTLOADER_LED
	/* PROG_PIN pulled low, indicate with LED that bootloader is active */
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
   3e1b8:	26 9a       	sbi	0x04, 6	; 4
//	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED ON
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON
   3e1ba:	2e 9a       	sbi	0x05, 6	; 5
	delay_ms(100);
   3e1bc:	84 e6       	ldi	r24, 0x64	; 100
   3e1be:	90 e0       	ldi	r25, 0x00	; 0
   3e1c0:	0f 94 a9 f0 	call	0x3e152	; 0x3e152 <delay_ms>
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmiter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
   3e1c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e1c8:	82 60       	ori	r24, 0x02	; 2
   3e1ca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
   3e1ce:	80 e1       	ldi	r24, 0x10	; 16
   3e1d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
   3e1d4:	88 e1       	ldi	r24, 0x18	; 24
   3e1d6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

	asm volatile ("nop");			// wait until port has changed
   3e1da:	00 00       	nop

#ifdef _DEBUG_SERIAL_
//	delay_ms(500);

	sendchar('u');
   3e1dc:	85 e7       	ldi	r24, 0x75	; 117
   3e1de:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar('t');
   3e1e2:	84 e7       	ldi	r24, 0x74	; 116
   3e1e4:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar('e');
   3e1e8:	85 e6       	ldi	r24, 0x65	; 101
   3e1ea:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar('c');
   3e1ee:	83 e6       	ldi	r24, 0x63	; 99
   3e1f0:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar('h');
   3e1f4:	88 e6       	ldi	r24, 0x68	; 104
   3e1f6:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar('_');
   3e1fa:	8f e5       	ldi	r24, 0x5F	; 95
   3e1fc:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar('B');
   3e200:	82 e4       	ldi	r24, 0x42	; 66
   3e202:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar('B');
   3e206:	82 e4       	ldi	r24, 0x42	; 66
   3e208:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>

	sendchar(0x0d);
   3e20c:	8d e0       	ldi	r24, 0x0D	; 13
   3e20e:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar(0x0a);
   3e212:	8a e0       	ldi	r24, 0x0A	; 10
   3e214:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
   3e218:	10 e0       	ldi	r17, 0x00	; 0
   3e21a:	c1 2c       	mov	r12, r1
   3e21c:	d1 2c       	mov	r13, r1
   3e21e:	76 01       	movw	r14, r12
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % _BLINK_LOOP_COUNT_) == 0)
   3e220:	97 ec       	ldi	r25, 0xC7	; 199
   3e222:	89 2e       	mov	r8, r25
   3e224:	9b e1       	ldi	r25, 0x1B	; 27
   3e226:	99 2e       	mov	r9, r25
   3e228:	a1 2c       	mov	r10, r1
   3e22a:	b1 2c       	mov	r11, r1
			{
				//*	toggle the LED
				PROGLED_PORT	^=	(1<<PROGLED_PIN);	// turn LED ON
   3e22c:	00 e4       	ldi	r16, 0x40	; 64


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3e22e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>

#endif

	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
   3e232:	87 fd       	sbrc	r24, 7
   3e234:	22 c0       	rjmp	.+68     	; 0x3e27a <main+0x10a>
   3e236:	11 11       	cpse	r17, r1
   3e238:	20 c0       	rjmp	.+64     	; 0x3e27a <main+0x10a>
   3e23a:	25 e0       	ldi	r18, 0x05	; 5
   3e23c:	2a 95       	dec	r18
   3e23e:	f1 f7       	brne	.-4      	; 0x3e23c <main+0xcc>
   3e240:	00 00       	nop
		{
			_delay_ms(0.001);
			boot_timer++;
   3e242:	4f ef       	ldi	r20, 0xFF	; 255
   3e244:	c4 1a       	sub	r12, r20
   3e246:	d4 0a       	sbc	r13, r20
   3e248:	e4 0a       	sbc	r14, r20
   3e24a:	f4 0a       	sbc	r15, r20
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   3e24c:	11 e0       	ldi	r17, 0x01	; 1
   3e24e:	81 e2       	ldi	r24, 0x21	; 33
   3e250:	c8 16       	cp	r12, r24
   3e252:	8e e4       	ldi	r24, 0x4E	; 78
   3e254:	d8 06       	cpc	r13, r24
   3e256:	e1 04       	cpc	r14, r1
   3e258:	f1 04       	cpc	r15, r1
   3e25a:	08 f4       	brcc	.+2      	; 0x3e25e <main+0xee>
   3e25c:	10 e0       	ldi	r17, 0x00	; 0
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % _BLINK_LOOP_COUNT_) == 0)
   3e25e:	c7 01       	movw	r24, r14
   3e260:	b6 01       	movw	r22, r12
   3e262:	a5 01       	movw	r20, r10
   3e264:	94 01       	movw	r18, r8
   3e266:	0f 94 d4 f3 	call	0x3e7a8	; 0x3e7a8 <__udivmodsi4>
   3e26a:	67 2b       	or	r22, r23
   3e26c:	68 2b       	or	r22, r24
   3e26e:	69 2b       	or	r22, r25
   3e270:	f1 f6       	brne	.-68     	; 0x3e22e <main+0xbe>
			{
				//*	toggle the LED
				PROGLED_PORT	^=	(1<<PROGLED_PIN);	// turn LED ON
   3e272:	85 b1       	in	r24, 0x05	; 5
   3e274:	80 27       	eor	r24, r16
   3e276:	85 b9       	out	0x05, r24	; 5
   3e278:	da cf       	rjmp	.-76     	; 0x3e22e <main+0xbe>
			}
		#endif
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
   3e27a:	1f 5f       	subi	r17, 0xFF	; 255
	}


	if (boot_state==1)
   3e27c:	11 30       	cpi	r17, 0x01	; 1
   3e27e:	09 f0       	breq	.+2      	; 0x3e282 <main+0x112>
   3e280:	59 c2       	rjmp	.+1202   	; 0x3e734 <main+0x5c4>
   3e282:	c2 5e       	subi	r28, 0xE2	; 226
   3e284:	de 4f       	sbci	r29, 0xFE	; 254
   3e286:	18 82       	st	Y, r1
   3e288:	ce 51       	subi	r28, 0x1E	; 30
   3e28a:	d1 40       	sbci	r29, 0x01	; 1
   3e28c:	d1 2c       	mov	r13, r1
   3e28e:	21 2c       	mov	r2, r1
   3e290:	31 2c       	mov	r3, r1
   3e292:	81 2c       	mov	r8, r1
   3e294:	91 2c       	mov	r9, r1
   3e296:	54 01       	movw	r10, r8
   3e298:	41 2c       	mov	r4, r1
   3e29a:	51 2c       	mov	r5, r1
   3e29c:	32 01       	movw	r6, r4
	sendchar('_');
	sendchar('B');
	sendchar('B');

	sendchar(0x0d);
	sendchar(0x0a);
   3e29e:	20 e0       	ldi	r18, 0x00	; 0
   3e2a0:	30 e0       	ldi	r19, 0x00	; 0
   3e2a2:	80 e0       	ldi	r24, 0x00	; 0
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
			{
				if (boot_state==1)
   3e2a4:	11 30       	cpi	r17, 0x01	; 1
   3e2a6:	c1 f0       	breq	.+48     	; 0x3e2d8 <main+0x168>
	sendchar('_');
	sendchar('B');
	sendchar('B');

	sendchar(0x0d);
	sendchar(0x0a);
   3e2a8:	41 e0       	ldi	r20, 0x01	; 1
   3e2aa:	52 e1       	ldi	r21, 0x12	; 18
   3e2ac:	6a e7       	ldi	r22, 0x7A	; 122
   3e2ae:	70 e0       	ldi	r23, 0x00	; 0
//*****************************************************************************
static unsigned char recchar_timeout(void)
{
uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3e2b0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e2b4:	97 fd       	sbrc	r25, 7
   3e2b6:	10 c0       	rjmp	.+32     	; 0x3e2d8 <main+0x168>
   3e2b8:	41 50       	subi	r20, 0x01	; 1
   3e2ba:	51 09       	sbc	r21, r1
   3e2bc:	61 09       	sbc	r22, r1
   3e2be:	71 09       	sbc	r23, r1
	{
		// wait for data
		count++;
		if (count > MAX_TIME_COUNT)
   3e2c0:	b9 f7       	brne	.-18     	; 0x3e2b0 <main+0x140>
		{
		unsigned int	data;
		#if (FLASHEND > 0x10000)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
   3e2c2:	6b bf       	out	0x3b, r22	; 59
   3e2c4:	fa 01       	movw	r30, r20
   3e2c6:	47 91       	elpm	r20, Z+
   3e2c8:	56 91       	elpm	r21, Z
		#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
		#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   3e2ca:	4f 3f       	cpi	r20, 0xFF	; 255
   3e2cc:	5f 4f       	sbci	r21, 0xFF	; 255
   3e2ce:	61 f3       	breq	.-40     	; 0x3e2a8 <main+0x138>
			{
				asm volatile(
   3e2d0:	ee 27       	eor	r30, r30
   3e2d2:	ff 27       	eor	r31, r31
   3e2d4:	09 94       	ijmp
   3e2d6:	e8 cf       	rjmp	.-48     	; 0x3e2a8 <main+0x138>
						);
			}
			count	=	0;
		}
	}
	return UART_DATA_REG;
   3e2d8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
				//	c	=	recchar();
					c	=	recchar_timeout();
					
				}		

				switch (msgParseState)
   3e2dc:	83 30       	cpi	r24, 0x03	; 3
   3e2de:	01 f1       	breq	.+64     	; 0x3e320 <main+0x1b0>
   3e2e0:	20 f4       	brcc	.+8      	; 0x3e2ea <main+0x17a>
   3e2e2:	81 30       	cpi	r24, 0x01	; 1
   3e2e4:	71 f0       	breq	.+28     	; 0x3e302 <main+0x192>
   3e2e6:	38 f0       	brcs	.+14     	; 0x3e2f6 <main+0x186>
   3e2e8:	14 c0       	rjmp	.+40     	; 0x3e312 <main+0x1a2>
   3e2ea:	85 30       	cpi	r24, 0x05	; 5
   3e2ec:	29 f1       	breq	.+74     	; 0x3e338 <main+0x1c8>
   3e2ee:	e0 f0       	brcs	.+56     	; 0x3e328 <main+0x1b8>
   3e2f0:	86 30       	cpi	r24, 0x06	; 6
   3e2f2:	99 f1       	breq	.+102    	; 0x3e35a <main+0x1ea>
   3e2f4:	35 c0       	rjmp	.+106    	; 0x3e360 <main+0x1f0>
				{
					case ST_START:
				if ( c == MESSAGE_START )
   3e2f6:	9b 31       	cpi	r25, 0x1B	; 27
   3e2f8:	b9 f6       	brne	.-82     	; 0x3e2a8 <main+0x138>
						{
							msgParseState	=	ST_GET_SEQ_NUM;
							checksum		=	MESSAGE_START^0;
   3e2fa:	8b e1       	ldi	r24, 0x1B	; 27
   3e2fc:	d8 2e       	mov	r13, r24
				switch (msgParseState)
				{
					case ST_START:
				if ( c == MESSAGE_START )
						{
							msgParseState	=	ST_GET_SEQ_NUM;
   3e2fe:	81 e0       	ldi	r24, 0x01	; 1
   3e300:	d3 cf       	rjmp	.-90     	; 0x3e2a8 <main+0x138>

					case ST_GET_SEQ_NUM:
//					#ifdef _FIX_ISSUE_505_
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
						checksum		^=	c;
   3e302:	d9 26       	eor	r13, r25
// 						else
// 						{
// 							msgParseState	=	ST_START;
// 						}
// 					#endif
						break;
   3e304:	c2 5e       	subi	r28, 0xE2	; 226
   3e306:	de 4f       	sbci	r29, 0xFE	; 254
   3e308:	98 83       	st	Y, r25
   3e30a:	ce 51       	subi	r28, 0x1E	; 30
   3e30c:	d1 40       	sbci	r29, 0x01	; 1
						break;

					case ST_GET_SEQ_NUM:
//					#ifdef _FIX_ISSUE_505_
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
   3e30e:	82 e0       	ldi	r24, 0x02	; 2
// 						else
// 						{
// 							msgParseState	=	ST_START;
// 						}
// 					#endif
						break;
   3e310:	cb cf       	rjmp	.-106    	; 0x3e2a8 <main+0x138>

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
   3e312:	29 2f       	mov	r18, r25
   3e314:	30 e0       	ldi	r19, 0x00	; 0
   3e316:	32 2f       	mov	r19, r18
   3e318:	22 27       	eor	r18, r18
						msgParseState	=	ST_MSG_SIZE_2;
						checksum		^=	c;
   3e31a:	d9 26       	eor	r13, r25
// 					#endif
						break;

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
						msgParseState	=	ST_MSG_SIZE_2;
   3e31c:	83 e0       	ldi	r24, 0x03	; 3
						checksum		^=	c;
						break;
   3e31e:	c4 cf       	rjmp	.-120    	; 0x3e2a8 <main+0x138>

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
   3e320:	29 2b       	or	r18, r25
						msgParseState	=	ST_GET_TOKEN;
						checksum		^=	c;
   3e322:	d9 26       	eor	r13, r25
						checksum		^=	c;
						break;

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
						msgParseState	=	ST_GET_TOKEN;
   3e324:	84 e0       	ldi	r24, 0x04	; 4
						checksum		^=	c;
						break;
   3e326:	c0 cf       	rjmp	.-128    	; 0x3e2a8 <main+0x138>

					case ST_GET_TOKEN:
						if ( c == TOKEN )
   3e328:	9e 30       	cpi	r25, 0x0E	; 14
   3e32a:	09 f0       	breq	.+2      	; 0x3e32e <main+0x1be>
   3e32c:	38 c2       	rjmp	.+1136   	; 0x3e79e <main+0x62e>
						{
							msgParseState	=	ST_GET_DATA;
							checksum		^=	c;
   3e32e:	d9 26       	eor	r13, r25
							ii				=	0;
   3e330:	21 2c       	mov	r2, r1
   3e332:	31 2c       	mov	r3, r1
						break;

					case ST_GET_TOKEN:
						if ( c == TOKEN )
						{
							msgParseState	=	ST_GET_DATA;
   3e334:	85 e0       	ldi	r24, 0x05	; 5
   3e336:	b8 cf       	rjmp	.-144    	; 0x3e2a8 <main+0x138>
							msgParseState	=	ST_START;
						}
						break;

					case ST_GET_DATA:
						msgBuffer[ii++]	=	c;
   3e338:	a1 01       	movw	r20, r2
   3e33a:	4f 5f       	subi	r20, 0xFF	; 255
   3e33c:	5f 4f       	sbci	r21, 0xFF	; 255
   3e33e:	e1 e0       	ldi	r30, 0x01	; 1
   3e340:	f0 e0       	ldi	r31, 0x00	; 0
   3e342:	ec 0f       	add	r30, r28
   3e344:	fd 1f       	adc	r31, r29
   3e346:	e2 0d       	add	r30, r2
   3e348:	f3 1d       	adc	r31, r3
   3e34a:	90 83       	st	Z, r25
						checksum		^=	c;
   3e34c:	d9 26       	eor	r13, r25
						if (ii == msgLength )
   3e34e:	24 17       	cp	r18, r20
   3e350:	35 07       	cpc	r19, r21
   3e352:	09 f4       	brne	.+2      	; 0x3e356 <main+0x1e6>
   3e354:	26 c2       	rjmp	.+1100   	; 0x3e7a2 <main+0x632>
   3e356:	1a 01       	movw	r2, r20
   3e358:	a7 cf       	rjmp	.-178    	; 0x3e2a8 <main+0x138>
							msgParseState	=	ST_GET_CHECK;
						}
						break;

					case ST_GET_CHECK:
						if ( c == checksum )
   3e35a:	9d 11       	cpse	r25, r13
   3e35c:	20 c2       	rjmp	.+1088   	; 0x3e79e <main+0x62e>
   3e35e:	03 c0       	rjmp	.+6      	; 0x3e366 <main+0x1f6>
		{
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
   3e360:	87 30       	cpi	r24, 0x07	; 7
   3e362:	09 f0       	breq	.+2      	; 0x3e366 <main+0x1f6>
   3e364:	a1 cf       	rjmp	.-190    	; 0x3e2a8 <main+0x138>

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0])
   3e366:	29 81       	ldd	r18, Y+1	; 0x01
   3e368:	23 31       	cpi	r18, 0x13	; 19
   3e36a:	09 f4       	brne	.+2      	; 0x3e36e <main+0x1fe>
   3e36c:	a8 c0       	rjmp	.+336    	; 0x3e4be <main+0x34e>
   3e36e:	48 f5       	brcc	.+82     	; 0x3e3c2 <main+0x252>
   3e370:	26 30       	cpi	r18, 0x06	; 6
   3e372:	09 f4       	brne	.+2      	; 0x3e376 <main+0x206>
   3e374:	96 c0       	rjmp	.+300    	; 0x3e4a2 <main+0x332>
   3e376:	f0 f4       	brcc	.+60     	; 0x3e3b4 <main+0x244>
   3e378:	22 30       	cpi	r18, 0x02	; 2
   3e37a:	b9 f1       	breq	.+110    	; 0x3e3ea <main+0x27a>
   3e37c:	23 30       	cpi	r18, 0x03	; 3
   3e37e:	b9 f1       	breq	.+110    	; 0x3e3ee <main+0x27e>
   3e380:	21 30       	cpi	r18, 0x01	; 1
   3e382:	09 f0       	breq	.+2      	; 0x3e386 <main+0x216>
   3e384:	86 c1       	rjmp	.+780    	; 0x3e692 <main+0x522>
					break;
	#endif
*/
				case CMD_SIGN_ON:
					msgLength		=	11;
					msgBuffer[1] 	=	STATUS_CMD_OK;
   3e386:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2] 	=	8;
   3e388:	88 e0       	ldi	r24, 0x08	; 8
   3e38a:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[3] 	=	'A';
   3e38c:	81 e4       	ldi	r24, 0x41	; 65
   3e38e:	8c 83       	std	Y+4, r24	; 0x04
					msgBuffer[4] 	=	'V';
   3e390:	86 e5       	ldi	r24, 0x56	; 86
   3e392:	8d 83       	std	Y+5, r24	; 0x05
					msgBuffer[5] 	=	'R';
   3e394:	82 e5       	ldi	r24, 0x52	; 82
   3e396:	8e 83       	std	Y+6, r24	; 0x06
					msgBuffer[6] 	=	'I';
   3e398:	89 e4       	ldi	r24, 0x49	; 73
   3e39a:	8f 83       	std	Y+7, r24	; 0x07
					msgBuffer[7] 	=	'S';
   3e39c:	83 e5       	ldi	r24, 0x53	; 83
   3e39e:	88 87       	std	Y+8, r24	; 0x08
					msgBuffer[8] 	=	'P';
   3e3a0:	80 e5       	ldi	r24, 0x50	; 80
   3e3a2:	89 87       	std	Y+9, r24	; 0x09
					msgBuffer[9] 	=	'_';
   3e3a4:	8f e5       	ldi	r24, 0x5F	; 95
   3e3a6:	8a 87       	std	Y+10, r24	; 0x0a
					msgBuffer[10]	=	'2';
   3e3a8:	82 e3       	ldi	r24, 0x32	; 50
   3e3aa:	8b 87       	std	Y+11, r24	; 0x0b
					break;
   3e3ac:	c1 2c       	mov	r12, r1
					}
					break;
	#endif
*/
				case CMD_SIGN_ON:
					msgLength		=	11;
   3e3ae:	0b e0       	ldi	r16, 0x0B	; 11
   3e3b0:	10 e0       	ldi	r17, 0x00	; 0
					msgBuffer[6] 	=	'I';
					msgBuffer[7] 	=	'S';
					msgBuffer[8] 	=	'P';
					msgBuffer[9] 	=	'_';
					msgBuffer[10]	=	'2';
					break;
   3e3b2:	74 c1       	rjmp	.+744    	; 0x3e69c <main+0x52c>

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0])
   3e3b4:	21 31       	cpi	r18, 0x11	; 17
   3e3b6:	41 f1       	breq	.+80     	; 0x3e408 <main+0x298>
   3e3b8:	08 f0       	brcs	.+2      	; 0x3e3bc <main+0x24c>
   3e3ba:	6a c0       	rjmp	.+212    	; 0x3e490 <main+0x320>
   3e3bc:	20 31       	cpi	r18, 0x10	; 16
   3e3be:	a9 f0       	breq	.+42     	; 0x3e3ea <main+0x27a>
   3e3c0:	68 c1       	rjmp	.+720    	; 0x3e692 <main+0x522>
   3e3c2:	28 31       	cpi	r18, 0x18	; 24
   3e3c4:	09 f4       	brne	.+2      	; 0x3e3c8 <main+0x258>
   3e3c6:	3c c0       	rjmp	.+120    	; 0x3e440 <main+0x2d0>
   3e3c8:	48 f4       	brcc	.+18     	; 0x3e3dc <main+0x26c>
   3e3ca:	25 31       	cpi	r18, 0x15	; 21
   3e3cc:	09 f4       	brne	.+2      	; 0x3e3d0 <main+0x260>
   3e3ce:	77 c0       	rjmp	.+238    	; 0x3e4be <main+0x34e>
   3e3d0:	08 f4       	brcc	.+2      	; 0x3e3d4 <main+0x264>
   3e3d2:	0e c1       	rjmp	.+540    	; 0x3e5f0 <main+0x480>
   3e3d4:	26 31       	cpi	r18, 0x16	; 22
   3e3d6:	09 f4       	brne	.+2      	; 0x3e3da <main+0x26a>
   3e3d8:	0b c1       	rjmp	.+534    	; 0x3e5f0 <main+0x480>
   3e3da:	5b c1       	rjmp	.+694    	; 0x3e692 <main+0x522>
   3e3dc:	2a 31       	cpi	r18, 0x1A	; 26
   3e3de:	19 f1       	breq	.+70     	; 0x3e426 <main+0x2b6>
   3e3e0:	08 f4       	brcc	.+2      	; 0x3e3e4 <main+0x274>
   3e3e2:	44 c0       	rjmp	.+136    	; 0x3e46c <main+0x2fc>
   3e3e4:	2b 31       	cpi	r18, 0x1B	; 27
   3e3e6:	a1 f0       	breq	.+40     	; 0x3e410 <main+0x2a0>
   3e3e8:	54 c1       	rjmp	.+680    	; 0x3e692 <main+0x522>
   3e3ea:	c1 2c       	mov	r12, r1
   3e3ec:	0f c0       	rjmp	.+30     	; 0x3e40c <main+0x29c>
   3e3ee:	ea 81       	ldd	r30, Y+2	; 0x02
   3e3f0:	e0 59       	subi	r30, 0x90	; 144
   3e3f2:	e3 30       	cpi	r30, 0x03	; 3
   3e3f4:	28 f4       	brcc	.+10     	; 0x3e400 <main+0x290>
   3e3f6:	f0 e0       	ldi	r31, 0x00	; 0
   3e3f8:	e0 50       	subi	r30, 0x00	; 0
   3e3fa:	fe 4f       	sbci	r31, 0xFE	; 254
   3e3fc:	80 81       	ld	r24, Z
   3e3fe:	01 c0       	rjmp	.+2      	; 0x3e402 <main+0x292>

				case CMD_GET_PARAMETER:
					{
						unsigned char value;

						switch(msgBuffer[1])
   3e400:	80 e0       	ldi	r24, 0x00	; 0
						default:
							value	=	0;
							break;
						}
						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3e402:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	value;
   3e404:	8b 83       	std	Y+3, r24	; 0x03
   3e406:	40 c0       	rjmp	.+128    	; 0x3e488 <main+0x318>
					}
					break;

				case CMD_LEAVE_PROGMODE_ISP:
					isLeave	=	1;
   3e408:	cc 24       	eor	r12, r12
   3e40a:	c3 94       	inc	r12
					//*	fall thru

				case CMD_SET_PARAMETER:
				case CMD_ENTER_PROGMODE_ISP:
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3e40c:	1a 82       	std	Y+2, r1	; 0x02
   3e40e:	44 c1       	rjmp	.+648    	; 0x3e698 <main+0x528>
					break;

				case CMD_READ_SIGNATURE_ISP:
					{
						unsigned char signatureIndex	=	msgBuffer[4];
   3e410:	8d 81       	ldd	r24, Y+5	; 0x05
						unsigned char signature;

						if ( signatureIndex == 0 )
   3e412:	88 23       	and	r24, r24
   3e414:	21 f0       	breq	.+8      	; 0x3e41e <main+0x2ae>
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
						else if ( signatureIndex == 1 )
   3e416:	81 30       	cpi	r24, 0x01	; 1
   3e418:	21 f4       	brne	.+8      	; 0x3e422 <main+0x2b2>
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   3e41a:	88 e9       	ldi	r24, 0x98	; 152
   3e41c:	25 c0       	rjmp	.+74     	; 0x3e468 <main+0x2f8>
					{
						unsigned char signatureIndex	=	msgBuffer[4];
						unsigned char signature;

						if ( signatureIndex == 0 )
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
   3e41e:	8e e1       	ldi	r24, 0x1E	; 30
   3e420:	23 c0       	rjmp	.+70     	; 0x3e468 <main+0x2f8>
						else if ( signatureIndex == 1 )
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						else
							signature	=	SIGNATURE_BYTES & 0x000000FF;
   3e422:	81 e0       	ldi	r24, 0x01	; 1
   3e424:	21 c0       	rjmp	.+66     	; 0x3e468 <main+0x2f8>
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3e426:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
   3e428:	e1 e0       	ldi	r30, 0x01	; 1
   3e42a:	f0 e0       	ldi	r31, 0x00	; 0
   3e42c:	89 e0       	ldi	r24, 0x09	; 9
   3e42e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e432:	84 91       	lpm	r24, Z
   3e434:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[3]	=	STATUS_CMD_OK;
   3e436:	1c 82       	std	Y+4, r1	; 0x04
					break;
   3e438:	c1 2c       	mov	r12, r1
						msgBuffer[3]	=	STATUS_CMD_OK;
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
   3e43a:	04 e0       	ldi	r16, 0x04	; 4
   3e43c:	10 e0       	ldi	r17, 0x00	; 0
					msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
					msgBuffer[3]	=	STATUS_CMD_OK;
					break;
   3e43e:	2e c1       	rjmp	.+604    	; 0x3e69c <main+0x52c>

				case CMD_READ_FUSE_ISP:
					{
						unsigned char fuseBits;

						if ( msgBuffer[2] == 0x50 )
   3e440:	8b 81       	ldd	r24, Y+3	; 0x03
   3e442:	80 35       	cpi	r24, 0x50	; 80
   3e444:	59 f4       	brne	.+22     	; 0x3e45c <main+0x2ec>
						{
							if ( msgBuffer[3] == 0x08 )
   3e446:	8c 81       	ldd	r24, Y+4	; 0x04
   3e448:	88 30       	cpi	r24, 0x08	; 8
   3e44a:	21 f4       	brne	.+8      	; 0x3e454 <main+0x2e4>
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3e44c:	89 e0       	ldi	r24, 0x09	; 9
   3e44e:	e2 e0       	ldi	r30, 0x02	; 2
   3e450:	f0 e0       	ldi	r31, 0x00	; 0
   3e452:	07 c0       	rjmp	.+14     	; 0x3e462 <main+0x2f2>
							else
								fuseBits	=	boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   3e454:	89 e0       	ldi	r24, 0x09	; 9
   3e456:	e0 e0       	ldi	r30, 0x00	; 0
   3e458:	f0 e0       	ldi	r31, 0x00	; 0
   3e45a:	03 c0       	rjmp	.+6      	; 0x3e462 <main+0x2f2>
						}
						else
						{
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3e45c:	e3 e0       	ldi	r30, 0x03	; 3
   3e45e:	f0 e0       	ldi	r31, 0x00	; 0
   3e460:	89 e0       	ldi	r24, 0x09	; 9
   3e462:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e466:	84 91       	lpm	r24, Z
						}
						msgLength		=	4;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3e468:	1a 82       	std	Y+2, r1	; 0x02
   3e46a:	e4 cf       	rjmp	.-56     	; 0x3e434 <main+0x2c4>
	#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
				case CMD_PROGRAM_LOCK_ISP:
					{
						unsigned char lockBits	=	msgBuffer[4];

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
   3e46c:	8d 81       	ldd	r24, Y+5	; 0x05
						boot_lock_bits_set(lockBits);		// and program it
   3e46e:	83 6c       	ori	r24, 0xC3	; 195
   3e470:	99 e0       	ldi	r25, 0x09	; 9
   3e472:	e1 e0       	ldi	r30, 0x01	; 1
   3e474:	f0 e0       	ldi	r31, 0x00	; 0
   3e476:	08 2e       	mov	r0, r24
   3e478:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e47c:	e8 95       	spm
						boot_spm_busy_wait();
   3e47e:	07 b6       	in	r0, 0x37	; 55
   3e480:	00 fc       	sbrc	r0, 0
   3e482:	fd cf       	rjmp	.-6      	; 0x3e47e <main+0x30e>

						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3e484:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	STATUS_CMD_OK;
   3e486:	1b 82       	std	Y+3, r1	; 0x03
					}
					break;
   3e488:	c1 2c       	mov	r12, r1

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
						boot_lock_bits_set(lockBits);		// and program it
						boot_spm_busy_wait();

						msgLength		=	3;
   3e48a:	03 e0       	ldi	r16, 0x03	; 3
   3e48c:	10 e0       	ldi	r17, 0x00	; 0
						msgBuffer[1]	=	STATUS_CMD_OK;
						msgBuffer[2]	=	STATUS_CMD_OK;
					}
					break;
   3e48e:	06 c1       	rjmp	.+524    	; 0x3e69c <main+0x52c>
	#endif
				case CMD_CHIP_ERASE_ISP:
					fPageAddr		=	0;
					msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
   3e490:	80 ec       	ldi	r24, 0xC0	; 192
   3e492:	8a 83       	std	Y+2, r24	; 0x02
					break;
   3e494:	c1 2c       	mov	r12, r1
					}
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					fPageAddr		=	0;
					msgLength		=	2;
   3e496:	02 e0       	ldi	r16, 0x02	; 2
   3e498:	10 e0       	ldi	r17, 0x00	; 0
						msgBuffer[2]	=	STATUS_CMD_OK;
					}
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					fPageAddr		=	0;
   3e49a:	81 2c       	mov	r8, r1
   3e49c:	91 2c       	mov	r9, r1
   3e49e:	54 01       	movw	r10, r8
					msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
					break;
   3e4a0:	fd c0       	rjmp	.+506    	; 0x3e69c <main+0x52c>
   3e4a2:	6a 81       	ldd	r22, Y+2	; 0x02
   3e4a4:	7b 81       	ldd	r23, Y+3	; 0x03
   3e4a6:	8c 81       	ldd	r24, Y+4	; 0x04
   3e4a8:	9d 81       	ldd	r25, Y+5	; 0x05
   3e4aa:	0f 94 f6 f3 	call	0x3e7ec	; 0x3e7ec <__bswapsi2>

				case CMD_LOAD_ADDRESS:
	//#if defined(RAMPZ)
					fTmpPgAddr	=	( ((uint32_t)(msgBuffer[1])<<24)|((uint32_t)(msgBuffer[2])<<16)|((uint32_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   3e4ae:	2b 01       	movw	r4, r22
   3e4b0:	3c 01       	movw	r6, r24
   3e4b2:	44 0c       	add	r4, r4
   3e4b4:	55 1c       	adc	r5, r5
   3e4b6:	66 1c       	adc	r6, r6
   3e4b8:	77 1c       	adc	r7, r7
	//#else
				//	address	=	( ((msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;		//convert word to byte address
	//#endif
			
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3e4ba:	1a 82       	std	Y+2, r1	; 0x02
   3e4bc:	ec c0       	rjmp	.+472    	; 0x3e696 <main+0x526>
   3e4be:	ea 80       	ldd	r14, Y+2	; 0x02
   3e4c0:	fb 80       	ldd	r15, Y+3	; 0x03
   3e4c2:	fe 24       	eor	r15, r14
   3e4c4:	ef 24       	eor	r14, r15
   3e4c6:	fe 24       	eor	r15, r14
						unsigned int	data;
						unsigned char	highByte, lowByte;
						uint32_t		tempaddress	=	fTmpPgAddr;


						if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
   3e4c8:	23 31       	cpi	r18, 0x13	; 19
   3e4ca:	09 f0       	breq	.+2      	; 0x3e4ce <main+0x35e>
   3e4cc:	5a c0       	rjmp	.+180    	; 0x3e582 <main+0x412>
						{
							// erase only main section (bootloader protection)
							if (fPageAddr < APP_END )
   3e4ce:	81 14       	cp	r8, r1
   3e4d0:	f0 ec       	ldi	r31, 0xC0	; 192
   3e4d2:	9f 06       	cpc	r9, r31
   3e4d4:	f3 e0       	ldi	r31, 0x03	; 3
   3e4d6:	af 06       	cpc	r10, r31
   3e4d8:	b1 04       	cpc	r11, r1
   3e4da:	98 f4       	brcc	.+38     	; 0x3e502 <main+0x392>
							{
								boot_page_erase_safe(fPageAddr);	// Perform page erase
   3e4dc:	07 b6       	in	r0, 0x37	; 55
   3e4de:	00 fc       	sbrc	r0, 0
   3e4e0:	fd cf       	rjmp	.-6      	; 0x3e4dc <main+0x36c>
   3e4e2:	f9 99       	sbic	0x1f, 1	; 31
   3e4e4:	fe cf       	rjmp	.-4      	; 0x3e4e2 <main+0x372>
   3e4e6:	23 e0       	ldi	r18, 0x03	; 3
   3e4e8:	f4 01       	movw	r30, r8
   3e4ea:	a0 92 5b 00 	sts	0x005B, r10	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3e4ee:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e4f2:	e8 95       	spm
								boot_spm_busy_wait();		// Wait until the memory is erased.
   3e4f4:	07 b6       	in	r0, 0x37	; 55
   3e4f6:	00 fc       	sbrc	r0, 0
   3e4f8:	fd cf       	rjmp	.-6      	; 0x3e4f4 <main+0x384>
								fPageAddr += SPM_PAGESIZE;	// point to next page to be erase
   3e4fa:	4f ef       	ldi	r20, 0xFF	; 255
   3e4fc:	94 1a       	sub	r9, r20
   3e4fe:	a4 0a       	sbc	r10, r20
   3e500:	b4 0a       	sbc	r11, r20
   3e502:	8b 85       	ldd	r24, Y+11	; 0x0b
   3e504:	de 01       	movw	r26, r28
   3e506:	11 96       	adiw	r26, 0x01	; 1
						if ( signatureIndex == 0 )
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
						else if ( signatureIndex == 1 )
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						else
							signature	=	SIGNATURE_BYTES & 0x000000FF;
   3e508:	93 01       	movw	r18, r6
   3e50a:	82 01       	movw	r16, r4
							/* Write FLASH */
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
   3e50c:	1b 96       	adiw	r26, 0x0b	; 11
   3e50e:	4c 91       	ld	r20, X
   3e510:	1b 97       	sbiw	r26, 0x0b	; 11
   3e512:	90 e0       	ldi	r25, 0x00	; 0
   3e514:	94 2b       	or	r25, r20
								boot_page_fill_safe(fTmpPgAddr,data);
   3e516:	07 b6       	in	r0, 0x37	; 55
   3e518:	00 fc       	sbrc	r0, 0
   3e51a:	fd cf       	rjmp	.-6      	; 0x3e516 <main+0x3a6>
   3e51c:	f9 99       	sbic	0x1f, 1	; 31
   3e51e:	fe cf       	rjmp	.-4      	; 0x3e51c <main+0x3ac>
   3e520:	41 e0       	ldi	r20, 0x01	; 1
   3e522:	0c 01       	movw	r0, r24
   3e524:	f8 01       	movw	r30, r16
   3e526:	20 93 5b 00 	sts	0x005B, r18	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3e52a:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e52e:	e8 95       	spm
   3e530:	11 24       	eor	r1, r1

								fTmpPgAddr	=	fTmpPgAddr + 2;	// Select next word in memory
   3e532:	0e 5f       	subi	r16, 0xFE	; 254
   3e534:	1f 4f       	sbci	r17, 0xFF	; 255
   3e536:	2f 4f       	sbci	r18, 0xFF	; 255
   3e538:	3f 4f       	sbci	r19, 0xFF	; 255
								size	-=	2;				// Reduce number of bytes to write by two
   3e53a:	82 e0       	ldi	r24, 0x02	; 2
   3e53c:	e8 1a       	sub	r14, r24
   3e53e:	f1 08       	sbc	r15, r1
   3e540:	12 96       	adiw	r26, 0x02	; 2
							} while (size);					// Loop until all bytes written
   3e542:	e1 14       	cp	r14, r1
   3e544:	f1 04       	cpc	r15, r1
   3e546:	21 f0       	breq	.+8      	; 0x3e550 <main+0x3e0>
							}

							/* Write FLASH */
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;
   3e548:	1a 96       	adiw	r26, 0x0a	; 10
   3e54a:	8c 91       	ld	r24, X
   3e54c:	1a 97       	sbiw	r26, 0x0a	; 10
   3e54e:	de cf       	rjmp	.-68     	; 0x3e50c <main+0x39c>

								fTmpPgAddr	=	fTmpPgAddr + 2;	// Select next word in memory
								size	-=	2;				// Reduce number of bytes to write by two
							} while (size);					// Loop until all bytes written

							boot_page_write_safe(tempaddress);
   3e550:	07 b6       	in	r0, 0x37	; 55
   3e552:	00 fc       	sbrc	r0, 0
   3e554:	fd cf       	rjmp	.-6      	; 0x3e550 <main+0x3e0>
   3e556:	f9 99       	sbic	0x1f, 1	; 31
   3e558:	fe cf       	rjmp	.-4      	; 0x3e556 <main+0x3e6>
   3e55a:	95 e0       	ldi	r25, 0x05	; 5
   3e55c:	f2 01       	movw	r30, r4
   3e55e:	60 92 5b 00 	sts	0x005B, r6	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3e562:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e566:	e8 95       	spm
							boot_spm_busy_wait();
   3e568:	07 b6       	in	r0, 0x37	; 55
   3e56a:	00 fc       	sbrc	r0, 0
   3e56c:	fd cf       	rjmp	.-6      	; 0x3e568 <main+0x3f8>
							boot_rww_enable_safe();				// Re-enable the RWW section
   3e56e:	07 b6       	in	r0, 0x37	; 55
   3e570:	00 fc       	sbrc	r0, 0
   3e572:	fd cf       	rjmp	.-6      	; 0x3e56e <main+0x3fe>
   3e574:	f9 99       	sbic	0x1f, 1	; 31
   3e576:	fe cf       	rjmp	.-4      	; 0x3e574 <main+0x404>
   3e578:	81 e1       	ldi	r24, 0x11	; 17
   3e57a:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e57e:	e8 95       	spm
   3e580:	33 c0       	rjmp	.+102    	; 0x3e5e8 <main+0x478>
						}
						else
						{
							//*	issue 543, this should work, It has not been tested.
							uint16_t ii = fTmpPgAddr >> 1;
   3e582:	d3 01       	movw	r26, r6
   3e584:	c2 01       	movw	r24, r4
   3e586:	b6 95       	lsr	r27
   3e588:	a7 95       	ror	r26
   3e58a:	97 95       	ror	r25
   3e58c:	87 95       	ror	r24
   3e58e:	6c 01       	movw	r12, r24
   3e590:	fe 01       	movw	r30, r28
   3e592:	3b 96       	adiw	r30, 0x0b	; 11
   3e594:	c1 5e       	subi	r28, 0xE1	; 225
   3e596:	de 4f       	sbci	r29, 0xFE	; 254
   3e598:	f9 83       	std	Y+1, r31	; 0x01
   3e59a:	e8 83       	st	Y, r30
   3e59c:	cf 51       	subi	r28, 0x1F	; 31
   3e59e:	d1 40       	sbci	r29, 0x01	; 1
							/* write EEPROM */
							while (size) {
   3e5a0:	00 e0       	ldi	r16, 0x00	; 0
   3e5a2:	10 e0       	ldi	r17, 0x00	; 0
   3e5a4:	0e 15       	cp	r16, r14
   3e5a6:	1f 05       	cpc	r17, r15
   3e5a8:	a9 f0       	breq	.+42     	; 0x3e5d4 <main+0x464>
								eeprom_write_byte((uint8_t*)ii, *p++);
   3e5aa:	c1 5e       	subi	r28, 0xE1	; 225
   3e5ac:	de 4f       	sbci	r29, 0xFE	; 254
   3e5ae:	e8 81       	ld	r30, Y
   3e5b0:	f9 81       	ldd	r31, Y+1	; 0x01
   3e5b2:	cf 51       	subi	r28, 0x1F	; 31
   3e5b4:	d1 40       	sbci	r29, 0x01	; 1
   3e5b6:	61 91       	ld	r22, Z+
   3e5b8:	c1 5e       	subi	r28, 0xE1	; 225
   3e5ba:	de 4f       	sbci	r29, 0xFE	; 254
   3e5bc:	f9 83       	std	Y+1, r31	; 0x01
   3e5be:	e8 83       	st	Y, r30
   3e5c0:	cf 51       	subi	r28, 0x1F	; 31
   3e5c2:	d1 40       	sbci	r29, 0x01	; 1
   3e5c4:	c8 01       	movw	r24, r16
   3e5c6:	8c 0d       	add	r24, r12
   3e5c8:	9d 1d       	adc	r25, r13
   3e5ca:	0f 94 fd f3 	call	0x3e7fa	; 0x3e7fa <eeprom_write_byte>
   3e5ce:	0f 5f       	subi	r16, 0xFF	; 255
   3e5d0:	1f 4f       	sbci	r17, 0xFF	; 255
   3e5d2:	e8 cf       	rjmp	.-48     	; 0x3e5a4 <main+0x434>
   3e5d4:	20 e0       	ldi	r18, 0x00	; 0
   3e5d6:	30 e0       	ldi	r19, 0x00	; 0
   3e5d8:	00 0f       	add	r16, r16
   3e5da:	11 1f       	adc	r17, r17
   3e5dc:	22 1f       	adc	r18, r18
   3e5de:	33 1f       	adc	r19, r19
   3e5e0:	04 0d       	add	r16, r4
   3e5e2:	15 1d       	adc	r17, r5
   3e5e4:	26 1d       	adc	r18, r6
   3e5e6:	37 1d       	adc	r19, r7
								ii++;
								size--;
							}
						}
						msgLength		=	2;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3e5e8:	1a 82       	std	Y+2, r1	; 0x02
					}
					break;
   3e5ea:	28 01       	movw	r4, r16
   3e5ec:	39 01       	movw	r6, r18
   3e5ee:	53 c0       	rjmp	.+166    	; 0x3e696 <main+0x526>
   3e5f0:	8a 81       	ldd	r24, Y+2	; 0x02
   3e5f2:	9b 81       	ldd	r25, Y+3	; 0x03
   3e5f4:	98 27       	eor	r25, r24
   3e5f6:	89 27       	eor	r24, r25
   3e5f8:	98 27       	eor	r25, r24
				case CMD_READ_FLASH_ISP:
				case CMD_READ_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;
   3e5fa:	8c 01       	movw	r16, r24
   3e5fc:	0d 5f       	subi	r16, 0xFD	; 253
   3e5fe:	1f 4f       	sbci	r17, 0xFF	; 255

						*p++	=	STATUS_CMD_OK;
   3e600:	1a 82       	std	Y+2, r1	; 0x02
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3e602:	24 31       	cpi	r18, 0x14	; 20
   3e604:	c1 f4       	brne	.+48     	; 0x3e636 <main+0x4c6>
   3e606:	de 01       	movw	r26, r28
   3e608:	11 96       	adiw	r26, 0x01	; 1

							// Read FLASH
							do {
						//#if defined(RAMPZ)
						#if (FLASHEND > 0x10000)
								data	=	pgm_read_word_far(fTmpPgAddr);
   3e60a:	6b be       	out	0x3b, r6	; 59
   3e60c:	f2 01       	movw	r30, r4
   3e60e:	27 91       	elpm	r18, Z+
   3e610:	36 91       	elpm	r19, Z
						#else
								data	=	pgm_read_word_near(fTmpPgAddr);
						#endif
								*p++	=	(unsigned char)data;		//LSB
   3e612:	12 96       	adiw	r26, 0x02	; 2
   3e614:	2c 93       	st	X, r18
   3e616:	12 97       	sbiw	r26, 0x02	; 2
   3e618:	fd 01       	movw	r30, r26
   3e61a:	34 96       	adiw	r30, 0x04	; 4
								*p++	=	(unsigned char)(data >> 8);	//MSB
   3e61c:	13 96       	adiw	r26, 0x03	; 3
   3e61e:	3c 93       	st	X, r19
   3e620:	13 97       	sbiw	r26, 0x03	; 3
								fTmpPgAddr	+=	2;							// Select next word in memory
   3e622:	22 e0       	ldi	r18, 0x02	; 2
   3e624:	42 0e       	add	r4, r18
   3e626:	51 1c       	adc	r5, r1
   3e628:	61 1c       	adc	r6, r1
   3e62a:	71 1c       	adc	r7, r1
								size	-=	2;
   3e62c:	02 97       	sbiw	r24, 0x02	; 2
   3e62e:	12 96       	adiw	r26, 0x02	; 2
							}while (size);
   3e630:	00 97       	sbiw	r24, 0x00	; 0
   3e632:	59 f7       	brne	.-42     	; 0x3e60a <main+0x49a>
   3e634:	2b c0       	rjmp	.+86     	; 0x3e68c <main+0x51c>
   3e636:	fe 01       	movw	r30, r28
   3e638:	31 96       	adiw	r30, 0x01	; 1
   3e63a:	9f 01       	movw	r18, r30
   3e63c:	28 0f       	add	r18, r24
   3e63e:	39 1f       	adc	r19, r25
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;

						*p++	=	STATUS_CMD_OK;
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3e640:	b3 01       	movw	r22, r6
   3e642:	a2 01       	movw	r20, r4
						}
						else
						{
							/* Read EEPROM */
							do {
								EEARL	=	fTmpPgAddr;			// Setup EEPROM address
   3e644:	41 bd       	out	0x21, r20	; 33
								EEARH	=	((fTmpPgAddr >> 8));
   3e646:	c5 2e       	mov	r12, r21
   3e648:	d6 2e       	mov	r13, r22
   3e64a:	e7 2e       	mov	r14, r23
   3e64c:	ff 24       	eor	r15, r15
   3e64e:	c2 bc       	out	0x22, r12	; 34
								fTmpPgAddr++;					// Select next EEPROM byte
   3e650:	4f 5f       	subi	r20, 0xFF	; 255
   3e652:	5f 4f       	sbci	r21, 0xFF	; 255
   3e654:	6f 4f       	sbci	r22, 0xFF	; 255
   3e656:	7f 4f       	sbci	r23, 0xFF	; 255
								EECR	|=	(1<<EERE);			// Read EEPROM
   3e658:	f8 9a       	sbi	0x1f, 0	; 31
								*p++	=	EEDR;				// Send EEPROM data
   3e65a:	a0 b5       	in	r26, 0x20	; 32
   3e65c:	a2 83       	std	Z+2, r26	; 0x02
   3e65e:	31 96       	adiw	r30, 0x01	; 1
								size--;
							} while (size);
   3e660:	2e 17       	cp	r18, r30
   3e662:	3f 07       	cpc	r19, r31
   3e664:	79 f7       	brne	.-34     	; 0x3e644 <main+0x4d4>
   3e666:	ac 01       	movw	r20, r24
   3e668:	41 50       	subi	r20, 0x01	; 1
   3e66a:	51 09       	sbc	r21, r1
   3e66c:	60 e0       	ldi	r22, 0x00	; 0
   3e66e:	70 e0       	ldi	r23, 0x00	; 0
   3e670:	4f 5f       	subi	r20, 0xFF	; 255
   3e672:	5f 4f       	sbci	r21, 0xFF	; 255
   3e674:	6f 4f       	sbci	r22, 0xFF	; 255
   3e676:	7f 4f       	sbci	r23, 0xFF	; 255
   3e678:	44 0e       	add	r4, r20
   3e67a:	55 1e       	adc	r5, r21
   3e67c:	66 1e       	adc	r6, r22
   3e67e:	77 1e       	adc	r7, r23
   3e680:	e3 e0       	ldi	r30, 0x03	; 3
   3e682:	f0 e0       	ldi	r31, 0x00	; 0
   3e684:	ec 0f       	add	r30, r28
   3e686:	fd 1f       	adc	r31, r29
   3e688:	e8 0f       	add	r30, r24
   3e68a:	f9 1f       	adc	r31, r25
						}
						*p++	=	STATUS_CMD_OK;
   3e68c:	10 82       	st	Z, r1
					}
					break;
   3e68e:	c1 2c       	mov	r12, r1
   3e690:	05 c0       	rjmp	.+10     	; 0x3e69c <main+0x52c>

				default:
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_FAILED;
   3e692:	80 ec       	ldi	r24, 0xC0	; 192
   3e694:	8a 83       	std	Y+2, r24	; 0x02
					break;
   3e696:	c1 2c       	mov	r12, r1
						*p++	=	STATUS_CMD_OK;
					}
					break;

				default:
					msgLength		=	2;
   3e698:	02 e0       	ldi	r16, 0x02	; 2
   3e69a:	10 e0       	ldi	r17, 0x00	; 0
			}

			/*
			 * Now send answer message back
			 */
			sendchar(MESSAGE_START);
   3e69c:	8b e1       	ldi	r24, 0x1B	; 27
   3e69e:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
			checksum	=	MESSAGE_START^0;

			sendchar(seqNum);
   3e6a2:	c2 5e       	subi	r28, 0xE2	; 226
   3e6a4:	de 4f       	sbci	r29, 0xFE	; 254
   3e6a6:	88 81       	ld	r24, Y
   3e6a8:	ce 51       	subi	r28, 0x1E	; 30
   3e6aa:	d1 40       	sbci	r29, 0x01	; 1
   3e6ac:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
   3e6b0:	81 2f       	mov	r24, r17
   3e6b2:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
			checksum	^=	c;

			c			=	msgLength&0x00FF;
			sendchar(c);
   3e6b6:	80 2f       	mov	r24, r16
   3e6b8:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
   3e6bc:	85 e1       	ldi	r24, 0x15	; 21
   3e6be:	c2 5e       	subi	r28, 0xE2	; 226
   3e6c0:	de 4f       	sbci	r29, 0xFE	; 254
   3e6c2:	d8 80       	ld	r13, Y
   3e6c4:	ce 51       	subi	r28, 0x1E	; 30
   3e6c6:	d1 40       	sbci	r29, 0x01	; 1
   3e6c8:	d8 26       	eor	r13, r24
   3e6ca:	d0 26       	eor	r13, r16
			checksum ^= c;

			sendchar(TOKEN);
   3e6cc:	8e e0       	ldi	r24, 0x0E	; 14
   3e6ce:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
			checksum ^= TOKEN;
   3e6d2:	d1 26       	eor	r13, r17
   3e6d4:	ce 01       	movw	r24, r28
   3e6d6:	01 96       	adiw	r24, 0x01	; 1
   3e6d8:	7c 01       	movw	r14, r24
   3e6da:	08 0f       	add	r16, r24
   3e6dc:	19 1f       	adc	r17, r25

			p	=	msgBuffer;
			while ( msgLength )
   3e6de:	0e 15       	cp	r16, r14
   3e6e0:	1f 05       	cpc	r17, r15
   3e6e2:	91 f0       	breq	.+36     	; 0x3e708 <main+0x598>
			{
				c	=	*p++;
   3e6e4:	f7 01       	movw	r30, r14
   3e6e6:	21 91       	ld	r18, Z+
   3e6e8:	7f 01       	movw	r14, r30
   3e6ea:	c1 5e       	subi	r28, 0xE1	; 225
   3e6ec:	de 4f       	sbci	r29, 0xFE	; 254
   3e6ee:	28 83       	st	Y, r18
   3e6f0:	cf 51       	subi	r28, 0x1F	; 31
   3e6f2:	d1 40       	sbci	r29, 0x01	; 1
				sendchar(c);
   3e6f4:	82 2f       	mov	r24, r18
   3e6f6:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
				checksum ^=c;
   3e6fa:	c1 5e       	subi	r28, 0xE1	; 225
   3e6fc:	de 4f       	sbci	r29, 0xFE	; 254
   3e6fe:	48 81       	ld	r20, Y
   3e700:	cf 51       	subi	r28, 0x1F	; 31
   3e702:	d1 40       	sbci	r29, 0x01	; 1
   3e704:	d4 26       	eor	r13, r20
   3e706:	eb cf       	rjmp	.-42     	; 0x3e6de <main+0x56e>
				msgLength--;
			}
			sendchar(checksum);
   3e708:	8d 2d       	mov	r24, r13
   3e70a:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
			seqNum++;
   3e70e:	c2 5e       	subi	r28, 0xE2	; 226
   3e710:	de 4f       	sbci	r29, 0xFE	; 254
   3e712:	88 81       	ld	r24, Y
   3e714:	ce 51       	subi	r28, 0x1E	; 30
   3e716:	d1 40       	sbci	r29, 0x01	; 1
   3e718:	8f 5f       	subi	r24, 0xFF	; 255
   3e71a:	c2 5e       	subi	r28, 0xE2	; 226
   3e71c:	de 4f       	sbci	r29, 0xFE	; 254
   3e71e:	88 83       	st	Y, r24
   3e720:	ce 51       	subi	r28, 0x1E	; 30
   3e722:	d1 40       	sbci	r29, 0x01	; 1
	
		#ifndef REMOVE_BOOTLOADER_LED
			//*	<MLS>	toggle the LED
			PROGLED_PORT	^=	(1<<PROGLED_PIN);	// active high LED ON
   3e724:	95 b1       	in	r25, 0x05	; 5
   3e726:	80 e4       	ldi	r24, 0x40	; 64
   3e728:	89 27       	eor	r24, r25
   3e72a:	85 b9       	out	0x05, r24	; 5
   3e72c:	10 e0       	ldi	r17, 0x00	; 0


	if (boot_state==1)
	{
		//*	main loop
		while (!isLeave)
   3e72e:	cc 20       	and	r12, r12
   3e730:	09 f4       	brne	.+2      	; 0x3e734 <main+0x5c4>
   3e732:	b5 cd       	rjmp	.-1174   	; 0x3e29e <main+0x12e>
// 	}
//	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// turn LED off
//#endif

#ifdef _DEBUG_SERIAL_
	sendchar('b');
   3e734:	82 e6       	ldi	r24, 0x62	; 98
   3e736:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar('y');
   3e73a:	89 e7       	ldi	r24, 0x79	; 121
   3e73c:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar(' ');
   3e740:	80 e2       	ldi	r24, 0x20	; 32
   3e742:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar('s');
   3e746:	83 e7       	ldi	r24, 0x73	; 115
   3e748:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar('a');
   3e74c:	81 e6       	ldi	r24, 0x61	; 97
   3e74e:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar('h');
   3e752:	88 e6       	ldi	r24, 0x68	; 104
   3e754:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar(0x0d);
   3e758:	8d e0       	ldi	r24, 0x0D	; 13
   3e75a:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>
	sendchar(0x0a);
   3e75e:	8a e0       	ldi	r24, 0x0A	; 10
   3e760:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <sendchar>

	delay_ms(100);
   3e764:	84 e6       	ldi	r24, 0x64	; 100
   3e766:	90 e0       	ldi	r25, 0x00	; 0
   3e768:	0f 94 a9 f0 	call	0x3e152	; 0x3e152 <delay_ms>
#endif


#ifndef REMOVE_BOOTLOADER_LED
	PROGLED_DDR		&=	~(1<<PROGLED_PIN);	// set to default
   3e76c:	26 98       	cbi	0x04, 6	; 4
	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED OFF
   3e76e:	2e 98       	cbi	0x05, 6	; 5
//	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED OFf
	delay_ms(100);							// delay after exit
   3e770:	84 e6       	ldi	r24, 0x64	; 100
   3e772:	90 e0       	ldi	r25, 0x00	; 0
   3e774:	0f 94 a9 f0 	call	0x3e152	; 0x3e152 <delay_ms>
#endif


	asm volatile ("nop");			// wait until port has changed
   3e778:	00 00       	nop

	/*
	 * Now leave bootloader
	 */

	UART_STATUS_REG	&=	0xfd;
   3e77a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e77e:	8d 7f       	andi	r24, 0xFD	; 253
   3e780:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	boot_rww_enable_safe();				// enable application section
   3e784:	07 b6       	in	r0, 0x37	; 55
   3e786:	00 fc       	sbrc	r0, 0
   3e788:	fd cf       	rjmp	.-6      	; 0x3e784 <main+0x614>
   3e78a:	f9 99       	sbic	0x1f, 1	; 31
   3e78c:	fe cf       	rjmp	.-4      	; 0x3e78a <main+0x61a>
   3e78e:	81 e1       	ldi	r24, 0x11	; 17
   3e790:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e794:	e8 95       	spm


	asm volatile(
   3e796:	ee 27       	eor	r30, r30
   3e798:	ff 27       	eor	r31, r31
   3e79a:	09 94       	ijmp
   3e79c:	ff cf       	rjmp	.-2      	; 0x3e79c <main+0x62c>
							checksum		^=	c;
							ii				=	0;
						}
						else
						{
							msgParseState	=	ST_START;
   3e79e:	80 e0       	ldi	r24, 0x00	; 0
   3e7a0:	83 cd       	rjmp	.-1274   	; 0x3e2a8 <main+0x138>
   3e7a2:	19 01       	movw	r2, r18
					case ST_GET_DATA:
						msgBuffer[ii++]	=	c;
						checksum		^=	c;
						if (ii == msgLength )
						{
							msgParseState	=	ST_GET_CHECK;
   3e7a4:	86 e0       	ldi	r24, 0x06	; 6
   3e7a6:	80 cd       	rjmp	.-1280   	; 0x3e2a8 <main+0x138>

0003e7a8 <__udivmodsi4>:
   3e7a8:	a1 e2       	ldi	r26, 0x21	; 33
   3e7aa:	1a 2e       	mov	r1, r26
   3e7ac:	aa 1b       	sub	r26, r26
   3e7ae:	bb 1b       	sub	r27, r27
   3e7b0:	fd 01       	movw	r30, r26
   3e7b2:	0d c0       	rjmp	.+26     	; 0x3e7ce <__udivmodsi4_ep>

0003e7b4 <__udivmodsi4_loop>:
   3e7b4:	aa 1f       	adc	r26, r26
   3e7b6:	bb 1f       	adc	r27, r27
   3e7b8:	ee 1f       	adc	r30, r30
   3e7ba:	ff 1f       	adc	r31, r31
   3e7bc:	a2 17       	cp	r26, r18
   3e7be:	b3 07       	cpc	r27, r19
   3e7c0:	e4 07       	cpc	r30, r20
   3e7c2:	f5 07       	cpc	r31, r21
   3e7c4:	20 f0       	brcs	.+8      	; 0x3e7ce <__udivmodsi4_ep>
   3e7c6:	a2 1b       	sub	r26, r18
   3e7c8:	b3 0b       	sbc	r27, r19
   3e7ca:	e4 0b       	sbc	r30, r20
   3e7cc:	f5 0b       	sbc	r31, r21

0003e7ce <__udivmodsi4_ep>:
   3e7ce:	66 1f       	adc	r22, r22
   3e7d0:	77 1f       	adc	r23, r23
   3e7d2:	88 1f       	adc	r24, r24
   3e7d4:	99 1f       	adc	r25, r25
   3e7d6:	1a 94       	dec	r1
   3e7d8:	69 f7       	brne	.-38     	; 0x3e7b4 <__udivmodsi4_loop>
   3e7da:	60 95       	com	r22
   3e7dc:	70 95       	com	r23
   3e7de:	80 95       	com	r24
   3e7e0:	90 95       	com	r25
   3e7e2:	9b 01       	movw	r18, r22
   3e7e4:	ac 01       	movw	r20, r24
   3e7e6:	bd 01       	movw	r22, r26
   3e7e8:	cf 01       	movw	r24, r30
   3e7ea:	08 95       	ret

0003e7ec <__bswapsi2>:
   3e7ec:	69 27       	eor	r22, r25
   3e7ee:	96 27       	eor	r25, r22
   3e7f0:	69 27       	eor	r22, r25
   3e7f2:	78 27       	eor	r23, r24
   3e7f4:	87 27       	eor	r24, r23
   3e7f6:	78 27       	eor	r23, r24
   3e7f8:	08 95       	ret

0003e7fa <eeprom_write_byte>:
   3e7fa:	26 2f       	mov	r18, r22

0003e7fc <eeprom_write_r18>:
   3e7fc:	f9 99       	sbic	0x1f, 1	; 31
   3e7fe:	fe cf       	rjmp	.-4      	; 0x3e7fc <eeprom_write_r18>
   3e800:	1f ba       	out	0x1f, r1	; 31
   3e802:	92 bd       	out	0x22, r25	; 34
   3e804:	81 bd       	out	0x21, r24	; 33
   3e806:	20 bd       	out	0x20, r18	; 32
   3e808:	0f b6       	in	r0, 0x3f	; 63
   3e80a:	f8 94       	cli
   3e80c:	fa 9a       	sbi	0x1f, 2	; 31
   3e80e:	f9 9a       	sbi	0x1f, 1	; 31
   3e810:	0f be       	out	0x3f, r0	; 63
   3e812:	01 96       	adiw	r24, 0x01	; 1
   3e814:	08 95       	ret

0003e816 <_exit>:
   3e816:	f8 94       	cli

0003e818 <__stop_program>:
   3e818:	ff cf       	rjmp	.-2      	; 0x3e818 <__stop_program>
